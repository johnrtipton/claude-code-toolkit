# pyproject.toml - Alternative mypy configuration for Django projects
#
# This is an alternative to mypy.ini using the modern pyproject.toml format.
# Copy the [tool.mypy] section below to your existing pyproject.toml
# or use this entire file if you don't have one yet.

[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "myproject"
version = "0.1.0"
description = "Django project with type checking"
requires-python = ">=3.11"
dependencies = [
    "Django>=4.2",
    "djangorestframework>=3.14",
]

[project.optional-dependencies]
dev = [
    "mypy>=1.8.0",
    "django-stubs>=4.2.7",
    "django-stubs-ext>=4.2.7",
    "djangorestframework-stubs>=3.14.5",
    "types-requests",
    "types-PyYAML",
]

# === Mypy Configuration ===
[tool.mypy]
# Django-specific plugins
plugins = ["mypy_django_plugin.main", "mypy_drf_plugin.main"]

# Python version
python_version = "3.11"

# Basic settings
show_error_codes = true
show_column_numbers = true
pretty = true
color_output = true

# Type checking strictness
check_untyped_defs = true
disallow_any_generics = true
disallow_subclassing_any = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
no_implicit_reexport = true

# Strictness (enable gradually)
# disallow_untyped_defs = true
# disallow_untyped_calls = true
# disallow_incomplete_defs = true
# strict_equality = true

# Import discovery
namespace_packages = true
explicit_package_bases = true

# Cache for performance
incremental = true
cache_dir = ".mypy_cache"
cache_fine_grained = true

# Django-stubs plugin configuration
[[tool.mypy.overrides]]
module = "mypy_django_plugin.*"
ignore_missing_imports = true

# === Module-Specific Configuration ===

# Ignore migrations
[[tool.mypy.overrides]]
module = "*.migrations.*"
ignore_errors = true

# Ignore tests (remove after adding type hints)
# [[tool.mypy.overrides]]
# module = "*.tests.*"
# ignore_errors = true

# Third-party packages without stubs
[[tool.mypy.overrides]]
module = [
    "celery.*",
    "kombu.*",
    "redis.*",
    "django_extensions.*",
    "debug_toolbar.*",
    "django_filters.*",
]
ignore_missing_imports = true

# Strict mode for specific modules (example)
# [[tool.mypy.overrides]]
# module = "myapp.core.*"
# disallow_untyped_defs = true
# warn_return_any = true

# === Pytest Configuration ===
[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "myproject.settings"
python_files = ["tests.py", "test_*.py", "*_tests.py"]
addopts = "--reuse-db --nomigrations"

# === Coverage Configuration ===
[tool.coverage.run]
source = ["."]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/test_*.py",
    "venv/*",
    "*/virtualenv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# === Black Code Formatter ===
[tool.black]
line-length = 100
target-version = ['py311']
include = '\\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.mypy_cache
  | \.venv
  | _build
  | build
  | dist
  | migrations
)/
'''

# === isort Import Sorter ===
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/migrations/*"]
known_django = ["django"]
known_first_party = ["myapp"]
sections = ["FUTURE", "STDLIB", "DJANGO", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# === Ruff Linter ===
[tool.ruff]
line-length = 100
target-version = "py311"
exclude = [
    ".git",
    ".mypy_cache",
    ".venv",
    "migrations",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Ignore unused imports in __init__.py

# === Django-Stubs Settings (Environment Variable Alternative) ===
# Instead of setting django_settings_module in [tool.mypy],
# you can also set it via environment variable:
#   export DJANGO_SETTINGS_MODULE=myproject.settings
#   mypy .

# === Notes ===
# 1. Install development dependencies:
#    pip install -e ".[dev]"
#
# 2. Or manually install mypy packages:
#    pip install mypy django-stubs django-stubs-ext djangorestframework-stubs
#
# 3. Run type checking:
#    mypy .
#
# 4. Generate HTML report:
#    mypy . --html-report ./mypy-report
#
# 5. Run with specific Django settings:
#    DJANGO_SETTINGS_MODULE=myproject.settings mypy .
#
# 6. Configure your IDE to use this pyproject.toml for mypy settings
